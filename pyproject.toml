[project]
name = "thespian"
version = "0.1.0"
description = "AI-driven theatrical production framework"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
dependencies = [
    "pydantic==2.7.1",
    "rich==13.7.0",
    "requests==2.31.0",
    "openai==1.23.2",
    "python-dotenv==1.0.1",
    "typer==0.12.3",
    "pytest==8.2.0",
    "textual==0.52.1"
]
requires-python = ">=3.8"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["thespian"]

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "RUF", # ruff-specific rules
    "D",   # pydocstyle
    "S",   # bandit
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "RSE", # flake8-raise
    "RET", # flake8-return
    "PIE", # flake8-pie
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "FBT", # flake8-boolean-trap
    "BLE", # flake8-blind-except
    "FURB", # flake8-fixme
    "ASYNC", # flake8-async
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "UP",  # pyupgrade
    "YTT", # flake8-2020
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR2004"]

[tool.ruff.lint.isort]
known-first-party = ["thespian"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
ban-imports = ["lxml", "bs4"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.flake8-commas]
trailing-comma = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

[tool.ruff.lint.flake8-return]
allow-return-any = false
allow-implicit-return = false

[tool.ruff.lint.flake8-simplify]
allow-global-variables = false
allow-ternary = true

[tool.ruff.lint.flake8-boolean-trap]
allow-parameter-position = false

[tool.ruff.lint.flake8-blind-except]
allowed-exceptions = ["Exception"]

[tool.ruff.lint.flake8-datetimez]
allow-naive-datetime = false

[tool.ruff.lint.flake8-errmsg]
max-string-length = 0

[tool.ruff.lint.flake8-import-conventions]
extend-aliases = { "np" = "numpy", "pd" = "pandas" }

[tool.ruff.lint.flake8-logging-format]
logging-format-style = "new"

[tool.ruff.lint.flake8-no-pep420]
strict = true

[tool.ruff.lint.flake8-pie]
prefer-list-builtin = true
prefer-dict-builtin = true
prefer-set-builtin = true

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.flake8-2020]
check-typed-exception = true

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/docs
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "pydantic.*",
    "thespian.llm.*",
    "thespian.processors.*",
    "thespian.checkpoints.*"
]
ignore_missing_imports = true 